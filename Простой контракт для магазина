// SPDX-Licence-Identifier: MIT

pragma solidity ^0.8.0;



contract MopedShop{
    mapping (address => bool) buyers;
    uint256 public price = 2  ether;
    address public owner;
    address public shopAddress;
    bool fullyPaid; // falce

    event ItemFullyPaid(uint _price, address _shopAddress);

 
    constructor(){
        owner = msg.sender;
        shopAddress = address(this);
    }
    function getBayer(address _addr) public view returns(bool) {
        require(owner == msg.sender, "You are not owner!!!");
        return buyers[_addr]; 

    }

    function withdrawAll() public {
        require(owner == msg.sender && fullyPaid && shopAddress.balance > 0, "You are not owner!!!");
        address payable receiver = payable(msg.sender);
        receiver.transfer(shopAddress.balance);

    }

    function addBuyer(address _addr) public {
        require(owner == msg.sender, "You are not owner!!!");
        buyers[_addr] = true;

    }

    function getBalance() public view returns(uint){
        return shopAddress.balance;
         
    }
    receive() external payable{
        require(buyers[msg.sender] && msg.value <= price && !fullyPaid, "Rejected!");

        if(shopAddress.balance == price){
            fullyPaid = true;
            
            emit ItemFullyPaid(price, shopAddress);

        }

    }

}
